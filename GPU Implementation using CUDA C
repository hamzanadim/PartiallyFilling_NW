
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <string.h>
#include <stdio.h>
#include <iostream>
#include <string>;

using namespace std;

__shared__ short Gap;
__shared__ short MatchScore;
__shared__ short MissMatchScore;

extern __shared__ int leftDiagonals[];

__device__ short Match(char a, char b)
{
	if (a == b)
		return MatchScore;
	else
		return MissMatchScore;
}

__global__ void FillDiagonalUsingSharedMemo(int diagonalNumber, int firstSeqLength, int2* Matrix, char* Seq1, char* Seq2, int rowsToSkip, int numberOfElementsBefore = 0)
{
	//shared memory is supposed to be faster than global memo, but in this case its the opposite :/

	////mapping 1D array to 2D array : x = index/numberOfColumns , y = index % numberOfColumns 
	////Number of columns is the lenghth of the first sequence
	//
	int i = threadIdx.x;

	//leftDiagonals array is a 2D array mapped in a 1D , containing the 2 left diagonals next to the one we r currently working on
	//it copies them from Global to Shared Memo to decreasing time

	int blockNumber = blockIdx.x;
	int threadsPerBlock = blockDim.x;

	int currentIndex = (rowsToSkip * (firstSeqLength - 1)) + diagonalNumber + ((i + 1)*(firstSeqLength - 1)) + (blockNumber * (firstSeqLength - 1) * threadsPerBlock) + numberOfElementsBefore;
	int index = currentIndex;

	Gap = -8;
	MatchScore = 10;
	MissMatchScore = -1000;
	if (i == 0)
		leftDiagonals[0] = Matrix[currentIndex - firstSeqLength].x + Gap;

	leftDiagonals[i + 1] = Matrix[currentIndex - 1].x + Gap;
	__syncthreads();



	//accessing Matrix through the faster SHARED MEMORY
	int up = leftDiagonals[i];
	int left = leftDiagonals[i + 1];
	int diagonal = Matrix[currentIndex - firstSeqLength - 1].x + Match(Seq1[(currentIndex % firstSeqLength) - 1], Seq2[(currentIndex / firstSeqLength) - 1]);


	//default way using COMPARISON
	//maxValue = up > left ? up : left;
	//maxValue = maxValue > diagonal ? maxValue : diagonal;

	//getting MAX value using bitwise operators
	int maxValue = (up + ~((up + ~left + 1) & ((up + ~left + 1) >> 31)) + 1); // if possible use sizeof(int)*sizeof(char)+~0 instead of 31
	maxValue = (diagonal + ~((diagonal + ~maxValue + 1) & ((diagonal + ~maxValue + 1) >> 31)) + 1); // if possible use sizeof(int)*sizeof(char)+~0 instead of 31

	Matrix[currentIndex].x = maxValue;


	if (maxValue == up)
		Matrix[currentIndex].y = 2;
	else if (maxValue == left)
		Matrix[currentIndex].y = 3;
	else if (maxValue == diagonal)
		Matrix[currentIndex].y = 1;

}
__global__ void InitializeValues(short firstSeqLength, int2 *Matrix, int LastDiagonalFill, unsigned short numberOfElementsBefore = 0)
{
	Gap = -8;
	int i = threadIdx.x;
	short block = blockIdx.x;
	int ThreadsPerBlock = blockDim.x;
	short defaultRightSideDirection = 3; // < Left
	short defaultLeftSideDirection = 2; // ^ UP

	//Matrix[i].x = 0;

	int currentIndex = numberOfElementsBefore + i + (ThreadsPerBlock * block);
	int CellIndex = currentIndex;

	if (currentIndex > LastDiagonalFill)
	{
		currentIndex += firstSeqLength * (currentIndex - LastDiagonalFill);
		defaultRightSideDirection = -1; // \ Diagonal
		defaultLeftSideDirection = -1;// \ Diagonal
	}
	Matrix[currentIndex].x = CellIndex * Gap;
	Matrix[currentIndex].y = defaultRightSideDirection;


	Matrix[CellIndex * firstSeqLength + (CellIndex - LastDiagonalFill & -(0 < CellIndex - LastDiagonalFill))].x = CellIndex * Gap;
	Matrix[CellIndex * firstSeqLength + (CellIndex - LastDiagonalFill & -(0 < CellIndex - LastDiagonalFill))].y = defaultLeftSideDirection;

}

bool CPU_TraceBack(int firstSeqLength, int secondSeqLength, int2* Matrix, char Seq1[], char Seq2[]);

int main(int argc, char *argv[])
{
	argv[1] = "CCAATGTCTATCGTAGATCTGGACACCGGAGACAAGGGCCGTCCGTCGCGTAGTCGGCTATCACCTAGTCTTGTGCCCGGTGCAGGTCGCTCGGTTCAAGTGGTGTTGGACTGCAGTAGAAGTGTACTACTCGTGGATCGCGAGAAGCAGAGTTGGCAAAGTATATGGACGTCTCCACACTTCCGCTCCATTCGTCAGAATAGCAATTACATTCGGGCCCACTATGGGTTCTGATCCACGTACATAAATGGCTCTAGGTTTGTAAGGTCTTATACAATGTGACCCTATACGAGTCGAGTCCGGAGACCTTACATCCTGCAACCAGCTACGTTTCATCGAGACTAGTAGATCTCCCTCACTAGTCAACGTCTGGAAGTCCCGCTTCTAAAGGGTGACCATAATCCTACCCAATCTGCCATGACGCAGCATGTCCGCCTGTCACGAACTTTCACACAGCACGCCCGGGGAGCCGAGAGAAGCGCAGAACTGAATCGACAATCGTCGTTCTCTAGCAATCAAATGTACTCCAGGAGCGCACCGGTGGTTACGATTACTAAGTTGTCACATATGTTGCCATGGTCTGTGGTTCGGCTCACAATTTATTGAGGTTATATGGCCCAATGCAGTTCATCGGTCAGCGTCATACGTGCACCCCACGTTACCCTGCCATAGTGGCCCGCTTGTAGACTTTTGTGATCTTTTTCCTCGGAGTTGAAGTCCAACATGTATACATCCAATGGCTATCATACATATACTATTGTCGAGAAGTAAGCATGTTCTGTGCACACATTATAGACTGGTGGCAGCCGATAAATAACTTTCGAATCGTTCTCATACCCTTGGTTTTTGGATTCCGAGCGTATGCACAACCGAATGACAGTCACTTTACCTGAGTTCTACATTCCCTTCAAGAGGATGCTACCGTAATAATGGCAATCTATAGCCCGTTCTGAGCCGGTGGACCACAGAGGGGGTTATTATGTCACATTCCGTGTTCTGTGTCCGGTTCCGGCCCAGAGCCACCCTCACAGGCTCACAATTGAGGGTATCCCCTGGGAAGTTACGTTCTGGATCTGTAAAAGATGTCCCGTGTTTTGCTGGAGGAGTAAAGAAAACCAACGGAGCAGTCTAGGTCTTCTAACGCACGTCAAAGGAAATTAATGGATTGGGCTGTCCTCGTTGAGCTTTCGTATCAAAACATAGGCATGTGGCGTGCCTCAATCTCCACTGCCAGTCATTGTGAAAGCTACGAGGTAGGCAAACGTCCAACGTAAGCCCTGTAGATGACGCGCACGCCCAGCCTCACTGAGGTCGGATGCCGTCGGTCCTCTAGCCGATAGGTCAAGACGATGACTTTCAGAGGCGGCTTTATGAACACAATTATCCTTCCGGCTATCATTTATGATTTGGCGGAGAAGTCCCAACCACAGTATGACTTTTCTGGTATCGACAGAAATTTCCGTACCCATCAGCATCGTAGCCATCCTCAATATAAGAGTGCTCCTGCAACTACGTAAAGTTTATTTGGACCTTCTCACTGACCGATCCGTAAAACCTCTTTAAGAAATCGACAATAGCTAGTAAGCTTAATGCTCTGAGACCTTTCTTAGGATTGTTAACAATCGTTACTTGACGTTAATCTCCCTGTGCAGATAGTGCACTGGCAAGGCTCTATACATCGTCTCCGGCTACCAACCGACCAGTCGGTTTTCGATCAGCATTTCCGATAACGAGTGCCAGAGGTTGAGGGCGCTCTGTGGACCCACCAGGAGAGTGGACAATGCCGCACTATGTGCCCCACAATAAAGAGGAAAAGAATTTCGGGGAGAACTGCGATCCCAGTGGTTACTCCCTGTCCCTTTATCCTCCTGGGGCGTTTCCTCACTACACGAACCGGACTTGGCGGAGATACCTGTAAGTCAGACGGTCAATGACACTCGCCCGGCGAGCGACTACAAAATGCTCGGCGAGACAATCTTTTACTTAAGTTAGTGGGTCTAGTCAGACCTGAAGGACTCAGATCCTTGACCTATTCTGGCCCCCCTTACACCAGCTGGAGGTGTAGTGCTGACAGCCGTCTTTTAACCATACGTGTGTGGTCCCTGTAATAACGGCAGCTCAACCTTCCCGTTCTGGAACACCGCATTCTTTACCTGTAACGGGGGATCAATGATAGTTGTATTTCCGTTAGTTTTAAAAAAACCTGTTCGCTCGGGCCCTTACTTTGATTGTCGTAGGTACCACCGGCCGCCGGATGCCAATTCACGGGGAATGAATAGGCCCCGCGAATCCCTATTCCTAAAAACTTGATGAGGGAAAGAAACCGGTGAGGGCACCCCTTCTATGCGGTCTGGCATCGCATCACCTCATTCGGCCATCGTTCCGCTAATCTATCAACGACTAGTAGATTTATATGAACATTCGGTGCCGGCCGCTCACGATAATCTAAGTATAGCGTATCTGGCGGCGTCAGGAACCGTAGGGCGCGAACTTCTGGTCCAGCATCCCAGATCGTAGATACAGGACATGCCCACTTCGGTTAATTTACCTTAAGATTGTACCACCGCTGAGACTGGACGGGGACCGCCCATGGGAATCACAGGCGTCATCCAACCACCTACAGGAACGCGCCGCAAACGTTGCAGCATCTGGCATATTGAGAGCAATGGGATGAAGGAACTCTCTATGTAGAGAGTTAAGTTCATCACTCTCTTGCGTCTACCAATCACGGAATCAACTGAAGAACGGTTCAGAAGGGAATTACACCAAGCTTGTAAGACCAGTTATTCGCCGTGAACTCAAGGACATGAATGCGCGGTATCGTCTGATCACGGCGTTCATTCCATGTGTCCTTTGTGTGGAACTCGTTATCCTATTCCCGGTAAGTCCAGGAGCTTACCGGAAAATTTTGATATAATGCTTGTCGCGGAATAAGTACAAGTTCCGCTGGCTCATCAAGCCCCCTGACTTTGTGGTATAGCCTTCAGTGTTAGGGCGACAGTACGGAATTGAAATTCCACAAGTTTAGTCCTATTTCGGGAAACGTTAGCACATAGCACCACAAAGTGAAAGATCTTTCATTAGCATGCCACTTACAAGTACAAGCGGGGGTGCCAGTCACCCCACGGCTTTGCAGTTATCCTGAGAGGTAGGAGGAGACAACCCCGTGAACTTGACAGCGATCCCGGGCAGCGCCTGTCTGTACCGCCACAACAAGTTTGACTTTACGTAGATCAGCAAATCATAGTACGAGTATCTGTGTATAGTGTACCTTTGGCTTGACCCAAACCCGGACACTTCGTAATCACTTGATGCGGCGTACTAGAGTATTCCGGGAGTTTCATACGTCGCAGAGCATCTGGGAATGCTAGTCGACGATTCGACACGCTCAATTCGAACGATTGATGATTGATTATGTAGCTTGTAATTCGGGGCTCCCGGACTGTAACTAGAGTGTCCTTCGACATGAGACACAGGATTTTATCAGTGGTTATCCTGGAATTACCAGGCATCTTTGGCGTATTCAGGAGGTCCTAATAATACTGAGGTTGCCTGATACCATATGAGTTCCCACCTGACCTAGGATACGTGAACTTTCGACGGGATGAGCCCGACACCTCTCCAGCGCTCTCCCTGCAGACAGTATCTTTGACTAATGAGGCGTCATTGGGGGCATGTTGTGTTGTTTGCCAATTTTCAATTGCGTCTTGTACCGTTGCTAAGTCAGGTAATCCCATGCGATAACCCCCTAGAGATGCTGCGACAAGTTAACTATATGAAGTTAACTGCCTGGGCTTGTCATCGTCCTGTTTCTTTGTCGGAAGGCACGAGCGGTCACGCATTTTTTGGTGTCCGACGTAGAGGGAGAAACCCAGGAAGCTCACCGATACTTCAAACCGCGCGAATAGATAGTGACATTTACTCGTTGAATCTTAAGTGTGCCACGTGAGACTGGTTTTGTCGAAGCAGTGACTCCTCTAACGCAATGGGGCTTTCACAACTTAATATTTTATTGAGTTTGGCACCGCTAGAGTGACGGGAACCGACACTAGTGTGATGGCGTCGTCAGACTCGCGTTTGAATATAGAAATCTTTCATACGCTCAACGTGCGATGGCCCGGCTAATACCTATTGTGAGTCGAGCCCCTGGAGGCATCCGGAACTACGTAAGATTAAGGCGGAGGTCCAAACGACCGCGGTGCTGAACGCTCGATATCGACAGTTCTTGGCCTTCACGAGCAAGACAGGGCCAGTTATTCAAGTAGCCGCCCCAGGTTCGGCCTCACCATATGGAGCAGTTCTCTATAAGTAACACCGAACACCGTAGTTTCCTGTCAACAGCCAACTACTAAGATAGAATCAACACAAGTGGCTACTCGAGAGTCCGTCCGTATGGGATGCTTCCTGGTGACCTGCTATGGGGCCGACGTATCTGGACGTATAGCCGAGTCAACAGGGAACTTTAGACGTGATTAGAAAAAAACGTCATAACCGGGAAAACCCGCCGGGTAGGTTCTGCGCTTGTCGCCTAAATGCGCATCGTTATGCGTCTGCCCCGCTATCGCTACCAAAGTTAATAAGCATGGCGACAAAGCCTGGACCAACGCCTGCCAGGGCTAGATGTAATAAAGCCACTCTATTAGCTGTTTAATAATTGGACGCGTAAAATCTTCGGAGCTCAAAATGGGACCATCGATGCTGTAGAGGTCTCCGCGGCATCCCTAACATTGATATAGACTCACTAATCAGACCGTGTTTGGGGAGTCCCGAGTGGCTCTTAATCTCGGACAGAGGGCCCGCGATATTAAGGAATAGGCACGACAACAGATTGACGTTACATAACATGAGTTAGTTGTACCCCAAGTAGCGCGAATATTTGAAAAATAGCATCGTGGAAAGTTCTAGAAACGAGGGCGTACTTTCCTAATCATCCGAGAACCAATCTGACTTATCGAATGGGTGGCGGTTAAATGTTCTTCGTCACTTAAAAGTTGCCCGGGCGGCCGGCCCGACTCGGCCGGCCACGAAAATGCGTCAGACCGGCCGATCGGTTTTTCAAGAGGCCTCGTAATCTTAGAGGAACTCTCCGTAAGTCGTTTTCTTCACGTTCCGTCAACCATAATAAACTGCGCACCAATCACTCCACGCCGCACACCATCTTCCGGAGAATTTTAGGGAAGTTATAATATAAGGTAAAGGTGACTCCGCTGATCAAAGTAGGAGTTCGAAGGATAATGGGGTAACTACGTTCGATCATCATGGCCTAACAACACTCAACACTAGACTATCATCGGACCCCTAAGCGCTAGGAACGTATCTATAATGACATACGTACTTCTAATCATCATGTCTTCTTTGGATCGATTGGTTGGTCAAGTACATCTCCGGGCACGCAGGCGAGCTGGAAACTGTACAATGCAGTAGTCTACCCTCTAGTGCGCGCCAAGCGAGAAATCCCGCGTCTACGGCTACTAGAAGATGATGGCTGTCCATTTCCCGCCTACTCATTTGACCGAAACCTTGAAATAACGCTCGGAACCGACAGGCGGTCGATTTCTCTTTCAGTAAGTTTCAATAATCCCCGAAGACGTGCCCCGGTCGGAGTCCTTACGATAGAAAGGAGTACGTCCGTGGGAGGGGGCACTCACGAGAGCAAAAGGGTGGCTTTCATTTCTCTCTGGCGGGAGCAAAGTAACGTAACGAGGGGCCCAGATTCGAAGGACGACTCCGGACTTTCATTTCACACAAGGGGTCCGCCGCGTTAAATGATAAAACCAAGGCTGGAAATGGATTAGATTGTTTAGAAATATACGTACGCATATTCCGGTCCTGCGCCTTATTGTCACGTATCATGTTTGCTTGAGTTTTGGTCCATTAGGATGTTATGGCCTGAAACAGCATGCCTTCTGATCACTCGGGACCGTCCGGAGCCTAACTATAACTCCAGGAGATTGCGACTGGACAGGTTCGTGGGATCCGGGTGCATTGCTGAACCATCAAGGTCCTGGGTCGGCAGTATCCGGCACATTTTTGAATACTGGGACGATCGAGCTCCAAGCATCCGTCTACGGAGCGGACGACGCCCGATCTCTTTGTCTTCATAACAGAGGTCTCGGATTCCACCCCGGGCCGCTTTGGACTAGGTATACACCAGATGCCACACTCCTACGACTATGCACGTACATAGACACCTATCGCTGGCGGTATTCCAATAACGGTGGCGCCGTTGATTGGAACGGTGCCATCCCTAATCGACGTCCGTGCCACCAATTAAATAGTACAAGTAGAACTTTTGGATGCTTCTAGCCAAGTTGTATACCTCGCAAAGCCCATAACGAACGCTAATTGTACAGCCGCACAAGTCCAACGACCTAGGCGGGACGCAGTACTAGCTGTTGGTTGATGTAAGGCACATCTGGAGTAGAGTTTGGGAGGTCCAGACTAAATCATACTACAACCATAGATGTACATAGAACTTGTGGTTGTGTTGCATTGTATGTACTTTTGTATAGGTTGACTATAGGGTAGCACACGCCCATGGGTTGGTAAATCAAAAGCCACTGAGTTTAATACGCGAGTTTAGGGTAGACGAGTTCATCGCTTAGCACGCTACCAGCTCGCGTCCCTTCAGGCCGAGGATTCACCACCCGAAAGCGAGGCCGAAGCGTGAAGTTGAAGAGAAAAAAGGTAATTGACGTATTCGCATGATGACGTGCATAGGATATGGGTCTAAACCCCAGTAGCTGCTACCCTTCTCGCTGTGACTCAGTTGTTGGCGAGCGGGAGGGGTTGTATTTATATGCACACAGGAGAGGTCATGCATCTCCCTCCCGAGATACACGAACCGCTTGCACCTCAAACAATTCTTTAAGGTTATCTGATCTGTGTCCGCACCGAGGACGCTCTGGTGTAGTTCCAGAAAAGTCGCAGTCGCCTGTAGGATGTGGGTACATAACAGTAGTAGGACTATGTAATTATCCGATATTTAGACATAACTCTCCCATTTATGAGATGTGTACCGCGTAGTTAAACATTTTTGTTTCGTCACGCCTAAAAGACGAATAACATGAGTCTTGTTACAGCGCACATTCCGTCTAGGACGAAACAGGCAGATGTGGCTAAACCTCTAAAGCAATGGGATGCACACGGTGTTGTCAGCGTGAGGTCTTCGTAGTTGATGAAGACGGAGCCTTTACAGCTGTGTGGTCGTAACGACATCAGCCGACAAAGTTGTAGTCTACTTGGGGCTGCACCGTAACCGTGAAACCGTTGAGCCTGACGCATTCGTGAACTATCGCAATCGAGAAATTATATGCCCAGTTAACGGACTAAATTCGAGTCATCAACTTAATCCATCAGACTCATATAACGGAGTTTCACCCGGCACGCTAATAACGCCAGGTACTTATGAAACCACGCTCGCAGGGTAAGATAGACACTGGCATATACATAATCTTCTGGTACAAAAGGGCCTGATGGAGAGAAATTGGGTGACGGTATATTGCGCGGGTCGCAACTGTAGCTAGAGGATTACAGGAGTCCGAGCCTAGCGCGCTATGGGAAGGAGCGCCCCCAGTGGGCGGTGCGTTGACCACCGACGGTGGTACTAGTTGTCTTGTTTGTTGATCACTCTATCTTAGTGCCGGATGCTAACGTACTCGATCGGTGATATACACTAGAAAAGCTGACACGTGTCCTGAGCCCCTTCCTAAATCAAGTCTTCAGCTTCCATTGCGGGTTTTCCTGAATCCAATGCACGTAATATAGTGGTCGACAGTATCTTTTTTATAACAACCTCTTAACCTACTAGAACGAAGTATGGTGAGGGGAATAGCGAGATATTCTATCTCGAGTGTGGGCCGGTGGTGCTATTATGGGCTGTCTTTGATTACTCATGAGGACTTGGGAATCATCGTCCAGATGTCGTATAAGTACCTCGGCAAAGATGAGATAAGGGAGAGAGTTAACTCTAACCTCGGCGCTCAAACTGGTGAACTAAATACCGTCCGGTTCTCTACTCAGTCGATTGAAGAGCAAGAAGCGCGGACCAGAAGAGGTAGATAGGGTGACTCCTGGAAAAAGGGCTACAACAGTTCCAGAGCGAGTCGATGGCAATGTCGAAGATTGCACCATACGAGATGTGGCGGACTGTCTTAGAGGGTAGAAGCCTTACCAATTGGGAAAGCCAGGTTACGGCTACATCTAGATTCGCCTAGTAAGCGGATTTAACCTTTGCGATACCACTGAACACCTCTTGGTAGTTAACCTCGTCATTAACGCCCCAATTAAGAAATTCTACACGCAATGTCTCTAGGCGCAATCCAATGGAGAAAATGACTGCTGATGATGAGAAGGATGAGGTTGCCTTCACTTCCTAGGCTCAATATCTCGCGCACATCACAGACCAGTCTGAGGCTTGCCAATCTGGCATATAACGTCGTCTATACTAGCGCTGGACGCATCCCTGTGTGTGATAGTTCAGGGGCCATCCCCTATTACTTTCGTTTCTGAACTGCCGGAAAACATGGTAAAGATGTACCCAGGCGACGGGCTGCCTTAACCCTGTTCAACGTTGATCTCCCAGCGGTGGGATGTAGGTTCCCATTTATCCATGGTGGATCTGTCCCGTGTGTAAATTCCCGACCGAGAACAAAATGTCAGCACTAGCGAACTCGGTCAGGAATCCGCAGTAGGGAAGTCTGTTAAGCTTTCTACAGGTATCCAGTAGGAGGCGGAAATCGCTGGAAATACTCTTGTTCATTGCGCTGTCAAGACACGTATTGACCCTCTAGCTCGGGTTGCGAAGGCATCCACAACATTTATTGCCCGACAGATACGAAAATTGCGACCTGCTTGTCCGTCATAGAACAGATTCTATCTGGATGGCCACAACTGCATTTCAGCACGCAAATATTGCACCCCTATGCAGATGACAAAGCCATGAGAACTTTTAAAAGGCCAAGAGTCGTCGACACCGCCCGAGCATAAGATTTAGTCATCCCCACCGAGGTCCTGTTCTGCCTTTCGGCCAATAATGAAGCACTGAGTTCATGCTTCTATGTGTGTTGTGGCCGCCTAGTGCCAGACAAAACTAATCCCCATAGACGATATCGGCTAGCGACGCGTCCATAAGTTCGGTCTCGTACACGGCAAAGGGGAATCTTATACCAGTGTCCGGGCTAGTGTAGCGAAGTCACGTGGGTATTTGCTAAAGATGTCACTTGAGGCAGTTCTAGAATGACCTAATACTTTTCCCCCACGAAGTGGAATCAAAAAAAAAGGAGGAATACTGAATAGGTTCTATATTCCCCGCAGAATTTACTCTATTAACTGAGGGGACGGGGACTATTTCCTCATGTTTTGCACAGCTTTTACTAGGGGTTGATGGGGCTGGTGTCGGCGCTTACGGTTGTCCAATCAGCAAGAGCGGTCAATTATCTATACGATCCCATAATTGGCTCAATAGGTTCTAGCTCCCTAATTCATGAATCTACGACAGATTTACACCAGGTCCCTGCTAAACTAATTGTTGACGGTTTAGTTCCCACAGCAGAACAATGACAAGTCTAGACCCTAAAAGAATTGTATCCATTGACCTATAAGCGTCCGTGATCGTTGTCCTGCGATACGCGTGGTTACGAGCTATTAAATGTCAATTGAACAAGTGGGCATCGCGACGGGCAGGACGGATTCGGCACGACCTGATCGTCTGGATGCTCAGAAATAAGATACAATCTCACGAGCACGCCTTGAGCCCCCTCGGTCGAGAAGTCTCGCGTATCCAATCTGGAGAATATGATGAGGCACACGTACGAACATCCGTTTATGACCGGATCGGCTGCGAGACCACGCGGAAGGGGGATTCCTCCGTGGAGAACGTGAGCGTTTTCGTTACACGCTAAACTTGGTAACAGTATGCCTTCATTCAGGGCTCCGACCCCGTCCCTGACGGTAAGGACTAAACTGTGTCAACAAGTAGAAGTTATTTGGAATCGGGGTA";
	argv[2] = "TGCCGACCTCGGCGTTGGCTCTAGCAAACCACAGGCTGGTGATCATGCCCATCTCAGAAGTCAGCCAAAAATTCCGTGGTCCGACATGTAGCATATACAGCAGCGATAGAAATACAATTGTTGATGCACTAGAAAGGTCGGTTCTGCAGTCGTTGTTACTGTCCTTTTAGTGAGATTCAGCCTCATGGCACAACTGAGCTCTTTTAAGCGAAAGGCATGAGGAACCGGCCTCTATTTTTTCACAAGATGAAGACGATTGATTTACCATGGTGAGGGCAAACGTGGGCGCCAACCATACGGGAGTGTGCGACCTACGTCCGATACGTTGGGATTCTCAATCTTTCAGGCACACATGGTCCCATGTTCTAATGCCAGGTCGACGGTGGTTGGCGCGGAGACCCAGAAGAACACGGGTTCCCGTATTGTAACGTTTTCGTGCTGCAGTGAAGCCTCATGACCAATCAACGGTCTAACAATCTATACTTAGCAAAGCGTGAAAGTCATTGTTACCCCCAAACGAGCGTGCGCTCATCCGGTTAGGGCGGCCAACAGCTTAAGCGAAAGCTAAGTAGCTTTAAGTTGCAGCACCAACGTGAGACCGGTACTTTATTTTTGTCTTATCCACGATCCCTGTGGGGGCTGCCAGCGGCCGACCTTTCATTGGGTCAGTGGCGGCTTTGTCGTAGCTAGCCCATTAGGGCCAGGGCTGATTTAGAGGATGCTTGCCGCGCCCCCGCACCCTCTCCTCTCGCAGAACAACTGGTCGGGCACGTCAGTAGCTACTATCACGCGAATGCTGAGGTCAATCGCGGCGCCCGCCCACAGAGCCTTACAACAATAAATTAACCCACAACCGTTATCATGTATCAACCCCCCACTACCAGACTACTCATTGTAGAAGACGCAGGTTAAATGATCGAGCTAGGTCGTGCCTCGACTAAGACTCATCATCAACCAGAAGTAAGGCGATAACGTACGGCGTAATTCGAAACCCCGATAGATCCACTCGCATTGTGTTGCTAAACGCTCGTCAACGAGTATTACTGTGTGCGCGCTCGTTAAATTGTTTGAGTATTACGGCGAGCCACCCCTGAATTACGCAGCAGGGCTTAACGCTCAGGAAACGTTAATTTTTGTCGGACACTCCTTGTGAGAGTGTCGGGGATGACTTGGCACAGAACTTCGCTCTGCGCCATGCCTGCGTGGTGAGGGGTTCGTAGATGGGCTTCGGGCATACAAACCGGTAATCGGGCATGATCTCTCTAACAACTGCATGGTCAGAAGTTTGGGTTGAGCAGGTGACACTTGGGAGGCCCTGTAAGCTCAACCAGACCCGGACAAGTTACGTCTTTGACAGTGGTGTGTACCTAACCTATGCCTCGTCACCCACAGTAGTGCAAACAGCAACATTCGGCCGAGGGACAATTGCAGCCGTAACTTCTGACGAGGTCAGTTAATGTGCTTGATAGCGTGGCGCGCCTGTTCAGTCTAGAACTACTGCTATGTTTAGGCGCAATAGGTACCCTCGTTGTCAATGAGTAGCAGGAGTCATGGCGGGACGCAATCTACACCTGAGGGGGTAGGTCCGGCGATCCCGCGTGTTCTGATAGAATTTAGTGGTCTATCCATCATACTAGCGGCCAACGAATGAGATTCACTACATCGAAGACTCGTTGCCGGCCACGCCATAACCATCTGTGGTAGGCTAACAGGCCATAACGAGTCGAGAGGATTACCTGTCGTGACGACTCCGAAAGACTGCATATGGGTGATAATAATTATCACTTTTTGGAGGTGTGAGATCGGCAAAAAACTCTTAAACGGCTTGCACATTCAAATGACCTTAGCCTTGTAACCGTGGGCTCTGGTCCTATTGTCGGCGCTGGGCCAGCAGTTATAACTTAGAAAGCCATCCACCCGCTCTATCTTTGAGGCTCCGAAAGAGGTCCTAGGTCTATTCCGAGGCCCTTCAGGAGCCGTATAACTCCTTCCCTGCATTTCGTCAAATCGGCCTGCAACGTACTATGGTGGCTCGTAGTCTTTCGAATGTGTGCTGCTGATTTATTTACCCTAACAGAGATCTATGAGCAAATCTATCCCGAGCACTGTTACGGGATCGCCGGCCCTGAGACGTCTGGAGCTGTTCCCGCAAGTATCTAGCGACCGACCGTCCTACAGCTTGACGAGGCTAGACCATTGCGATATCCGTGCGAACGGCACATTTAGGTGTTGAACTGTTCGTCGATGTAATACTGCAATGGCATGAAACTTGCCAAACCAAGTAACTACACGAGGCTCTACAGGGGGTCGGCCCATTTTCAACGACGGGCGCCGCATCTCAACGCTTGGGCTCATCGTACAAGATTTAAATGTGGAGGTATATATCTGCTTAGGGACGGTACAAGGTGCCATATTAAGGAACGAGTTCTGCTTAAATTCGCGCACTTCGGTAAGCGATTCGAGGAATACCAGTTGCTGCCTGGGCGTCGTTTTTTCTGTGTTTTGGGGTAGTGGCATACTGACTCGGTTTTCCACAGCAAACTGGAGCGTCTCAACATAATGGTGTGGCGCGTGCTGGCCTTCAGTTGATACCAGTAAAGTATTAGAAGGGTAGAACACGATGTGATCATCGAGTCATATCCACCAGATGAAGCGTCAGACCAGCACTCCTTACCGTCAGCCCTTCTGATTTGAGACCACGCCGGGTTTAAAAAGTTACAAATCCTGAACCACGTTAACGCACTCTTACCACATGGTTTGTCCGGACCGGTTCAGACTATAGCCGAATTCAAAACAGACGGGTATGTTGGCATAGCATAGACCTGCCCCGTCGCGCGGTTAACCTTGACTACTAGCCATATGATCATACCACTAGTAATGACTCGACAATAGCTATACATAAGATCCTTCGGAGTGCCCGGCTTCTTAAGTCATGTACTTCTGCGCAATTACATCGGCCTCGTGCTGGATATCTCCGAGTTTGAAGCAGTCCATGGAAACACATCGTAATAAACATTCAGAGTAGGCCCGCAATCACGGTGGAGCCCCTGGGACGTTTCACGCTGATGTAAGAAATACGCTATATAACGTGCTAAACATCCACTGTATGCCACTGCCCAGTGTACCCAAAAACTACGTCTTGATAAATTGCTACTAGCACAACGGCCCCCACAAGCAATCGTACCGAAAAGTTTCTCTGCCGAGGTTTAATACGGGTATAGCCCAGCACCTGTGAACTGCGGTTAGAGCATCTAATCGATGTGGACGGGATTCGTACTCTAGGGTGCCAAGATGAGAGCGATAGGTACGAGTTGTTCTCTACAATCAAAGAAAGTAATTTGTAATGGCGATATTGGCACTTTGATGTCGCTCACCACAGCACCTGAGGTGCAGTACCAAGCTATGATAGGTCCTCAACCTACCAACGACTCGTTAGGTGGAAACCTCGGTCTCGGTGACCTCCGCGCTTGCAAGCTCAGAATTCGCTCGATGACGGCCTAGCGTGGTACCGACCCATTTAGAGTGGTGAGATAATGGAGTTCATCCCCAACTCTCAGCGTCGAAGCAGTACTCAGTACGCCGGTTGAGCCATCGGGCTGTCGCACTGCCTATACGAAGGAGCTAATAACTAGAGAGCAAAAGTCCACAAGGAGAGTGGTCCAACCTCTCTGTGGTATACTGAAGGATTTATGAGGAGATTGCGATGTTAGTACTGCATGCTCTGTACTATTTGTCCCAGAGACCATCATTTGTGTCTAATCATGCATTGTTTGAACAGAACGTGTGATTTCCTGGGAGAATCTATATCAGCCTTGGACGAAATCGAATTTCCGAATCTGTGGCCAATTAAACATATTACCTTTGCAGTTGCGGGTCCACAGATCTTGGAGTCACAGCATTTAACCTGTTGGCGCGTAACTTTCCGTACAGAGGCGGTAATCGCCTGACGAAGCAAAGCACCCCGGAGCGTTAACAGAACATCAAGCCACAAGTCGTTAGTACGGGAGATCTGTACAGCACGATATCAGGGCATTAGGTCAGCGAGTGCTGGATCGTCGCCAATCATGAAGCCTAGTTTCAGGGTTCAGCACAAAAACCACGGCGCTATAGACCCGCCTTGCAGACCCTAAAATTCATAGAGAAGTAGCCCCTTCTATGCAAATTAATCTGCGCTACTAGCATGGCGGGAGAGGGTAGGATGCTGTAGTCGGCAATATGGTCGCGAGAGTTGGAGACATCGTGCTACAGGCGTAAATAGGCAAACATCCTAATCTAGCTAGATTGGGGTGGGCCAATGACATGGACGAAATAGGTGGGCGCCTGGTGGCCATCATCCGCTAAACGAAGTTTGCTACAATGAACGTTGGGATTTTAGGAAGCTGCTTATTACCGACTCCCGTTTCTACTCCGTTCCACTCACGGACAGCGGTCCCCTATTCAGGGTCCTGGACAGCGGTTTCACATCAGATATATAGTAGTCCGTAGCATACGTAAATGCGGACCAGGAAGGGGTATCCAGATGTATTATACCCAGGACTCTGACTATTTAGAGAACTCGACGGATCTGCCTATGCCTTAAATGCTGGGTTCGGCACATTAGGGAGAGAGCCTCGACTCGGGGCCAGTGAACTATCTGAGCAGAGGCTTCGCCCGTTCTATGTTGACTCCAGTACATGGGGGTTTCTACTTACTGAGCTGCTGGGACGAGACGCTGGAATAGGCTTCTCGTGGTCGACGCTCAATATAAACACTGACCCGGTCCGTAGTGGTCGTCGACCACCCCTCGCGTGTAGTTCCATCATCTGGTCTGATGTATTCATCCCTTCTACCGCTCGTATGGGACGGATGTTCTAATCGCTTGTTAAGTTGATTGCGCTACTTCATTGGTCTCGAGACAGGTATACTTGCTACAATATTAGCTAACCCTAGTCCTTCTGCTATTAGACGAGGCTACTATCAGAGAACTAAGAGGGACATCGAACTAACCGTGTTGGACTATGCATATGCTATGAGAAGCATTGTGTACTTTAATTAGTCCACACGAATCGGCTTATTCTATGGTTTCGGACATTTACCCACGAGCGAGCTACACTTGGTGGCGGTATTTTAGACCGGTGCTACGATAGAATGTACTTCCCGAGTTCGGAGGGAAGGAAAATCTTTTCATCGCGCACTTGGGCACCCACTGTTCCCTGCTAAGCGTTTGTTCACTCAGAAGCTAGTCATAGAATGGTATTTCTCTTCACTGGGCCCAGACACAGCCGAGGTAGAGCCAGGACGTCTCCGTACAGCACCAACGCGAGTAGTTATCGCGACCATTGGGAACAAATATTTATGTGGGATCGTATGTCATGGTCGTCATCATCCCAGGCCGGGGCCAGGCAGAAGCAAAATAGGTTCGCCACTCGAAGACCATGGCCCATTAGGCGATCCTTTCCCCGTGCTAGCCGAAAAAGCCTGGTAAATGTTGGCTAGCTGATTTATTTGCCGGTCAGCTGGTTCTGTCAATCGGGTGCCAAGCCAGAGTCTCTCAGAGTTAACACAATCTTCTCATGAGGGCCCGGCTAATACTATTGATGATATACAGAAATGCGCTTGCATGTCAACATTAGAATGTGCGGTACGAGCGACCGAAGAATCCGGAAGGGGAACTACTGGGACTTTGGAATCGCGATACTCTTTAGTATAGGTTTTTCGGTCGAGTTGATGCAGCGGCCCTGCTCCCGCCAGCAATGCCGGCTATTAGGGGATTCGACGTGGCCCATTGCTTAGAGCGATGAAGAAGCCCTTATTATGCCTGACGCAGTATCCCCGAGGCCGGCTACGCTGATGAATCTCTATGTAGCAGTCTTACAGTGTCCTTCTGGGGCCTCCGTTCCAAGATATACAGTGCGGTCAGAACTATAGGAACATTCGTTCTATGATAGGACACGGTGGTTACCGTTCCCTTACCGAGGTGTTAGCATCGAAATACAGGCAACCGAGGATGGAGCAACGTTTTACCTACAGTACCAGACAACCTACACATGCTGTAGGATGGTACCGCTCCTTGTAGAAACATTCCTCCGTTATCTTCACAGTCAGCCCCTAAAAAGAGTCTTGTTTACAGCTCTAGGCGAGAACCCACGGCAGTGCCTGCGTGAAACATTTGATACTCAACGGCCCCTCCTGACCCCTGGATTCCGACCCTTCGTACTGCCTCGAGGGACATGTTTCCAGCAAACTTCTGATGTCGGCCATCGACTGCGTCTCATCCGCACCGTCACCACGTAACTCAGTCAGTTGAGTTCTTGGGACGGGTCTCCCCGAACTCCGGGTATGTATCTCCGTACACCCGGACCTTTATATTTCCACTTGAACTTAGTTTATTAACCGGAGCCCTCGAGGGCCAGGCCCTGAAAATATCTCGCTAGGTAACACGGCACTTATCCCAGCCTCCGGTAATATTCCGAGGTCCTGATTCCTGTTTGAGACACGGGCTTCAAGGCCAAAGCCCAGACAATGCTACGAAAGTATAGCGTAATAAACAGCTGTGTTGCAGTGCTTCCGCGCTCCATAACTGGAGGCCGGTTTCAATCAAGCGGTAATAAATAAGAGGAGGAATTCTGCGGGTTAAAAAGGTGAGATCGTTGGCTGCGCGGCGTTTTATATGGCAGCTCCCAACCTTGATCTGCACCCGCACCAACATGGCCCTTACCGATGAAGATCGCTACAGAGTCACTACATAGTTTTAACCCCCTCCGCCCAGGCTTAGCAGCTCTCTGTTTGCTCCACGACGACCTTAAATTCCATTAAATTTCCTTCAACGTCGAGGTACCGCAACACCTAGGACGGTCTGTTCGTAAACGAACACGGCGTACGCTGGCTTCAAACGATAGTGAGTGTTAAAAGAAGCAGGTCGCTTTGCAACCTTCCTCCCGGTTGCAAGTAGCCGAGGTGCGATGCCACCCGTTGACCCATAGAAGTGCCACCAAAGTCCATCCGCCTAGCCTCGGATCATGGTCACCTGTCAAAACTTGCAAGACCACCTGAGTTGCAATTACGTGTCGCAAGGTAATTGCTAGCGTAACATCGCACTAATGGTTATTATGCATGATATCCCGCCGGTCCCATTGACACGGTAGAGCTACAGACGGTCGGTAAGGGTAGACTGCATGACATCTACAAACAGTCGCGCTATCCGTAATGCCATAACAGACAACCGTCAAACAGACCAGTTGATCTAGCCTGAGGTTTAAAGATATGCTCGGTGGATGACGGTCATCTAATTAACGGGCTCGGAACCCAATGTGCCGCCGACCCTCGCTTTCTAAATTGCGTCAAGACGTATCACTTTGCGTTAAGCCGCCCAAAGTCCGGCATTATCCAGAGTGGACTTCCACAGCCAGTGATGCCTGACATGGCAGCTAGCTCTCGTGGACGAATGGTCGATACCTGCAGAGAGCGACAGATCGCCAGCCTTATATCAACAAAAAGATGGATCGGGATATCTTCCAAGATTAGGATCCGGCGAAGTACCTTTAAAGACGTATCCCACGGGCGGTGGCTACTCTGTAAAGCCTAGACTGCGGTGAAGGATTCGCTACAACGAGTCCCAACCGAACGTACACTTGCAGGGGCCCTAAATTCCGGCAGGATCAGGAACGTGCGGCCTATGTCGTGACAGAGGCAGTGGACTCTACGAACCTTGAGGGATGCTAAGATGTTGGTGCGCAGATGCTGGTGTAGGGTATGTCGGTGCGGAACTTACTGGGGTTGCGTGAAAACTCGATATTCAGCCTAGCCGTCAACACGCAGGTTAAACCAGGGTCCCTCCAGGCGACCTTATGCATGTCCACACAGAGGACTCTATTAGTGGTCTCTCCTATATCCATCTTGGCGAACCGTAGTGCTGCGCGCGACCCGCCACCTTAAGTCGTGTTCGCTCCAGGGTTCCGGAACTCTTGGCATTGGGCAAGAGTATAAGAGGCGAATCAATCAGACGGATGGCGAATGCAGCGATAGGCGCCGTGTTTTGGTACTATGGTACATCAATCTATCTGCTCAAGTCACCCTGTGAATAAGGGACTGTGGAGAAGAGACGTAGACGCCGTTTTAAGGTCCCCCACGCGCATAACAGAACAGCGGCAGTTTTCCATGGAGGTAAGATCAATAAAGATAAGGTCGCGGGATTTATGGACAGTGGTATCGATTAACACATCTCGCAAAAGTTAGTTCTGCGCCTGGATCGCTGGTGCCTGTACGCATCAGAAAGGTGTTAAGGCCTCCGCATTTTGAGGAGGCAGCCTTAATCCGCCACCCAGCAAAGCATTGTTCCAGAGTTGCGGGGGCATCCGAAAAGGGTAAGTTTTGCGGTGTTTTTTGGTATGGCCAATTGTAGAGGCGGGGACAAAGAGGTGGACGCAAGCCGGGTGCGCATACCCCGCGCTGGCCTGCTTCATTTTGCATCTCGAGTGTTAGTTCATCTTTAGTCCGTTTACGGAATACAAACACAGAATTCTGTGGTTGAAGTTCTGCGGTACTTCGGGGACAAGCACCTTGGAACCGTATGCGTCAGATTCCTTGGTGTTTACGCTCTATAGACTTCATGCGTAGTGACGCTAGAGAAGCCCATCGGGAGCTCGACACATGCACAAGCGCTCCATAGAGAGAAATTGCGCAGTCGAGGCCTTTGGTGGCAAAGAGAGTTGCCGTGCTTTTCTGCAGACTTCAAAGTACAACCCGTAGTTTAGCCGGTCAATCATTCCACCCACCGAGTTTTATTTACGTAAGCAATGTCACGGGGTCTGGTTCGACTATCAAGGGACGCGTCGCGCTGCTGCACAACGAGAATTAGAATAGGGAGGCAAGTGCTAGACGAGGGAACCGCTCTGGCAGTACCCGCGCCTTCAGCCTAAATTTAGATATAGAAACCCCACTGTCCTTAATCCAGAATCGATATGCTCTCTAAAGGGTACGGCAAGCTCACTTGTTCCGATGTCGCCCCACACATTAACATTTTATACACCTGACTCACGTAACCGGTCACGTGATCAGGCAGAGCTCGTGACAACCGATCAAATGTTTTGCCGTTTAATGCCCTCTTGGGATCCGTGATTTCCGTGAAATGAGGTCGGACACCGGTACCTGAGACATAAGCCAGTAGATCCATGCAAAATGCCGCGTGCTCAATTGCACAGTTTGGATGCATAATAACTGGACAAGTAGGCTGACCCCAGGTAACTAATTGTGGCGATTTGACAAGGAGGGGCCTCACGAGCACTCGAGGGTCGTGGAAGGACCGTATGAGCGCGCTAAGTGCAACTGCCGAGTTGTCATCCCAACGTTAGATTGAGCGTATGTTGGGTACGTGCGCCAGATGGGAGCCCTGAGCCATATGTTTGAGGAACCCTCAGTCTACTGAGACTTACGGAAACTACTCGAACACCGGGATTACTATCCATTGGTCACTGAATGATCTAACTGAGAAGTTGAGCCATGGAGCGAACTCGTGTCGGAGATCGCTATACATTTGCTTTGGATGCTTGCGAAGTTCCCCTAATACCCAAACGCCATAGTTTTGCCACATCAGAAGAGTCTGTGGTCCCCAGATTTGTAGCTGAGTGGGGTCGTTGACTTAGTCTGACGGTGAGTAATTCGAGATCAATGTTTGAGACAATTAACGCTATGACGGTACTGATCTCTGCACAGCTCCAGCGTAATACACTGAGTTTTAACCTTCGTTCTCTTCAGGACTTTCTTTGCGTTCCTTTGAGTAATGTACCACGTGGGCTAATTACTATATTATACTCCTGTCGTCTGTGGCGAGACTTCAGATCCACAGCCTCGAGGACTGACTACAGAATTATATTCGGAACTTTCCATATATCAGAGTAAAGCCCTGGCCTACGGTTGAGGATACAATGCGGGTTGGAATGCGGTAAGTCAATCTTGGACTGTTGGTTGTGTGAACTGACACATGAGCTATAACTTTGTCAGTTAGTCCGTTACCAGACGAATG";

		//MAX NUMBER OF THREADS PER BLOCK DETERMINED BY USER (Different based on the used GPU)
		short maxThreads = 256;

		char *Seq1;
		char *Seq2;

		short firstSeqLength = strlen(argv[1]);
		short secondSeqLength = strlen(argv[2]);

		char* d_Seq1;
		char* d_Seq2;


		cudaMalloc(&d_Seq1, firstSeqLength * sizeof(char));
		cudaMalloc(&d_Seq2, secondSeqLength * sizeof(char));

		cudaMallocHost(&Seq1, firstSeqLength * sizeof(char));
		cudaMallocHost(&Seq2, secondSeqLength * sizeof(char));

		Seq1 = argv[1];
		Seq2 = argv[2];

		cudaMemcpyAsync(d_Seq1, Seq1, firstSeqLength * sizeof(char), cudaMemcpyHostToDevice);
		cudaMemcpyAsync(d_Seq2, Seq2, secondSeqLength * sizeof(char), cudaMemcpyHostToDevice);

		firstSeqLength++;
		secondSeqLength++;


		int2 *d_Matrix;
		cudaMalloc(&d_Matrix, firstSeqLength * secondSeqLength * sizeof(int2));



		int2 *h_Matrix;
		cudaMallocHost(&h_Matrix, firstSeqLength * secondSeqLength  * sizeof(int2));

		short threads;
		firstSeqLength > secondSeqLength ? threads = firstSeqLength : threads = secondSeqLength;


		float DesiredPercentage = 0.6f; // INPUT Desired Percentage

			int numberOfBlocks = firstSeqLength / maxThreads;
			short remainingThreads = firstSeqLength - (maxThreads * numberOfBlocks);



			float stopDiagonal = 1 - (floor(sqrt((1 - DesiredPercentage)*(firstSeqLength - 1)*(secondSeqLength - 1))) / firstSeqLength);
			stopDiagonal *= (firstSeqLength - 1);

			int maxDesiredThreads = (int)stopDiagonal;
			if (maxDesiredThreads < 3)
				maxDesiredThreads = 3;

			//initilization phase
			InitializeValues << <numberOfBlocks, maxThreads >> >(firstSeqLength, d_Matrix, maxDesiredThreads);
			InitializeValues << <1, remainingThreads >> >(firstSeqLength, d_Matrix, maxDesiredThreads, maxThreads * numberOfBlocks);

			////filling the matrix diagonally before reaching the maximum diagonal
			int i = 2;
			for (i; i < firstSeqLength; i++)
			{
				if (i - 1 <= maxDesiredThreads)
				{
					int numberOfBlocks = (i - 1) / maxThreads;
					short RemainingThreads = i - 1 - numberOfBlocks * maxThreads;
					if (numberOfBlocks >= 1)
						FillDiagonalUsingSharedMemo << <numberOfBlocks, maxThreads, maxThreads * sizeof(int) + 4 >> >(i, firstSeqLength, d_Matrix, d_Seq1, d_Seq2, 0);

					FillDiagonalUsingSharedMemo << <1, RemainingThreads, RemainingThreads * sizeof(int) + 4 >> >(i, firstSeqLength, d_Matrix, d_Seq1, d_Seq2, 0, (firstSeqLength - 1) * numberOfBlocks * maxThreads);
				}
				else
				{
					int threads;
					short rowsToSkip;
					short newIndex = i - maxDesiredThreads;
					switch (newIndex % 2)
					{
					case 0:
						threads = maxDesiredThreads - 1;
						break;
					case 1:
						threads = maxDesiredThreads;
						break;
					}
					rowsToSkip = newIndex / 2;

					int numberOfBlocks = threads / maxThreads;
					short RemainingThreads = threads - numberOfBlocks * maxThreads;
					if (numberOfBlocks >= 1)
						FillDiagonalUsingSharedMemo << <numberOfBlocks, maxThreads, maxThreads * sizeof(int) + 4 >> >(i, firstSeqLength, d_Matrix, d_Seq1, d_Seq2, rowsToSkip);

					FillDiagonalUsingSharedMemo << <1, RemainingThreads, RemainingThreads * sizeof(int) + 4 >> >(i, firstSeqLength, d_Matrix, d_Seq1, d_Seq2, rowsToSkip, (firstSeqLength - 1) * numberOfBlocks * maxThreads);
				}
			}

			//filling the matrix diagonally after reaching the maximum diagonal
			int j = i - 2;
			for (i; i < firstSeqLength * secondSeqLength; i += firstSeqLength)
			{

				if (j + 1 > maxDesiredThreads)
				{
					int threads;
					short rowsToSkip;
					short newIndex = j - maxDesiredThreads;
					switch (newIndex % 2)
					{
					case 0:
						threads = maxDesiredThreads - 1;
						break;
					case 1:
						threads = maxDesiredThreads;
						break;
					default:
						threads = 1;
						break;
					}
					rowsToSkip = newIndex / 2 + 1;

					int numberOfBlocks = threads / maxThreads;
					short RemainingThreads = threads - numberOfBlocks * maxThreads;
					if (numberOfBlocks >= 1)
						FillDiagonalUsingSharedMemo << <numberOfBlocks, maxThreads, maxThreads * sizeof(int) + 4 >> >(i, firstSeqLength, d_Matrix, d_Seq1, d_Seq2, rowsToSkip);

					FillDiagonalUsingSharedMemo << <1, RemainingThreads, RemainingThreads * sizeof(int) + 4 >> >(i, firstSeqLength, d_Matrix, d_Seq1, d_Seq2, rowsToSkip, (firstSeqLength - 1) * numberOfBlocks * maxThreads);
				}

				else
				{
					int threads = j + 1;
					short rowsToSkip = 0;

					int numberOfBlocks = threads / maxThreads;
					short RemainingThreads = threads - numberOfBlocks * maxThreads;
					if (numberOfBlocks >= 1)
						FillDiagonalUsingSharedMemo << <numberOfBlocks, maxThreads, maxThreads * sizeof(int) + 8 >> >(i, firstSeqLength, d_Matrix, d_Seq1, d_Seq2, rowsToSkip);

					FillDiagonalUsingSharedMemo << <1, RemainingThreads, RemainingThreads * sizeof(int) + 8 >> >(i, firstSeqLength, d_Matrix, d_Seq1, d_Seq2, rowsToSkip, (firstSeqLength - 1) * numberOfBlocks * maxThreads);
				}
				j--;
			}

			cudaDeviceSynchronize();
			cudaMemcpy(h_Matrix, d_Matrix, firstSeqLength * secondSeqLength * sizeof(int2), cudaMemcpyDeviceToHost);

			//call traceback function
			CPU_TraceBack(firstSeqLength, secondSeqLength, h_Matrix, Seq1, Seq2);

		cudaFree(d_Seq1);
		cudaFree(d_Seq2);

		cudaFreeHost(h_Matrix);
		cudaFreeHost(Seq1);
		cudaFreeHost(Seq2);

		cudaFree(d_Matrix);

	return 0;
}

bool CPU_TraceBack(int firstSeqLength, int secondSeqLength, int2* Matrix, char Seq1[], char Seq2[])
{
	string alignment1 = "";
	string alignment2 = "";

	////building alignment ascendingly
	for (long i = firstSeqLength*secondSeqLength - 1; i > 0;)
	{
		if (Matrix[i].y == 1) // DIAGONAL
		{
			alignment1 += Seq1[(i%firstSeqLength) - 1];
			alignment2 += Seq2[(i / firstSeqLength) - 1];
			i -= firstSeqLength + 1;
		}
		else if (Matrix[i].y == 2) // UP
		{
			alignment1 += '-';
			alignment2 += Seq2[(i / firstSeqLength) - 1];
			i -= firstSeqLength;
		}
		else if (Matrix[i].y == 3) // LEFT
		{
			alignment1 += Seq1[(i%firstSeqLength) - 1];
			alignment2 += '-';
			i--;
		}
	}

	string orderedAlignment1;
	string orderedAlignment2;
	//reverse ordering the alignment
	for (int i = alignment1.size() - 1; i >= 0; i--)
		orderedAlignment1 += alignment1[i];

	for (int i = alignment2.size() - 1; i >= 0; i--)
		orderedAlignment2 += alignment2[i];

	cout << orderedAlignment1 << "|";
	cout << orderedAlignment2 << "|";

	return true;
}
